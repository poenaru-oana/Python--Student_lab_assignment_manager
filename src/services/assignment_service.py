from domain.assignment import Assignment
from services.undo_service import UndoableOperation
from services.undo_service import UndoService
import random
import datetime


class AssignmentService:
    def __init__(self, assignment_repository):
        """
        The AssignmentService constructor saves the instance of assignemnt repository passed as a parameter and adds
        some random assignments to the repository
        :param student_repository: An object of type AssignmentRepository
        """
        self.__assignment_repository = assignment_repository
        self.add_7_random_assignments()

    def add_assignment(self, assignment_id, description, deadline):
        """
        The function takes the 3 arguments and creates an assignment object that is inserted into the repository
        :param assignment_id: a string representing the id of the assignment
        :param description: a string representing thedescriptionname of the assignment
        :param deadline: a string representing the deadline of the assignment
        """
        assignment = Assignment(assignment_id, description, deadline)
        self.__assignment_repository.add(assignment)
        UndoService.register_operation(UndoableOperation(lambda: self.__assignment_repository.remove(assignment_id),
                                                         lambda: self.__assignment_repository.add(assignment)))

    def remove_assignment(self, assignment_id):
        """
        The function removes the assignment with the given id
        :param assignment_id: a string representing the id of the assignment
        """
        assignment = self.__assignment_repository.get_assignment(assignment_id)
        self.__assignment_repository.remove(assignment_id)
        UndoService.register_operation(UndoableOperation(lambda: self.__assignment_repository.add(assignment),
                                                         lambda: self.__assignment_repository.remove(assignment_id)))

    def update_assignment(self, assignment_id, description, deadline):
        """
        The function takes the 3 arguments and updates the assignment with the given id with the
        new description and deadline
        :param assignment_id: a string representing the id of the assignment
        :param description: a string representing thedescriptionname of the assignment
        :param deadline: a string representing the deadline of the assignment
        """
        old_assignment = self.__assignment_repository.get_assignment(assignment_id)
        new_assignment = Assignment(assignment_id, description, deadline)
        self.__assignment_repository.update(new_assignment)
        UndoService.register_operation(UndoableOperation(lambda: self.__assignment_repository.update(old_assignment),
                                                         lambda: self.__assignment_repository.update(new_assignment)))

    def get_assignments(self):
        """
        :return: A list of all the assignments from the repository
        """
        return self.__assignment_repository.get_assignments()

    def add_7_random_assignments(self):
        """
        This function adds 7 assignments to the repository. The assignments are generated by randomly getting a
        a description, month and day from the respective list
        """
        description_list = ["Lab1", "Lab2", "Lab3", "Lab4", "Lab5", "Lab6", "Lab8", "lab9", "Lab10"]
        months_list = [11, 12]
        days_list = list(range(1, 31))
        for i in range(7):
            description = description_list[random.randint(0, len(description_list) - 1)]
            month = months_list[random.randint(0, len(months_list) - 1)]
            day = days_list[random.randint(0, len(days_list) - 1)]
            deadline = datetime.datetime(2021, month, day)
            assignment = Assignment(str(i + 1), description, deadline)

            self.__assignment_repository.add(assignment)
