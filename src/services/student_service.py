from domain.student import Student
from services.undo_service import UndoableOperation
from services.undo_service import UndoService
import random


class StudentService:
    def __init__(self, student_repository):
        """
        The StudentService constructor saves the instance of student repository passed as a parameter and adds
        some random students to the repository
        :param student_repository: An object of type StudentRepository
        """
        self.__student_repository = student_repository
        self.add_13_random_students()

    def add_student(self, student_id, name, group):
        """
        The function takes the 3 arguments and creates a student object that is inserted into the repository
        :param student_id: a string representing the id of the student
        :param name: a string representing the name of the student
        :param group: a string representing the group of the student
        """
        student = Student(student_id, name, group)
        self.__student_repository.add(student)
        UndoService.register_operation(UndoableOperation(lambda: self.__student_repository.remove(student_id),
                                                         lambda: self.__student_repository.add(student)))

    def remove_student(self, student_id):
        """
        The function removes the student with the given id
        :param student_id: a string representing the id of the student
        """
        student = self.__student_repository.get_student(student_id)
        self.__student_repository.remove(student_id)
        UndoService.register_operation(UndoableOperation(lambda: self.__student_repository.add(student),
                                                         lambda: self.__student_repository.remove(student_id)))

    def update_student(self, student_id, name, group):
        """
        The function takes the 3 arguments and updates the student with the given id with the
        new name and group
        :param student_id: a string representing the id of the student
        :param name: a string representing the name of the student
        :param group: a string representing the group of the student
        """
        old_student = self.__student_repository.get_student(student_id)
        new_student = Student(student_id, name, group)
        self.__student_repository.update(new_student)
        UndoService.register_operation(UndoableOperation(lambda : self.__student_repository.update(old_student),
                                                         lambda : self.__student_repository.update(new_student)))

    def get_students(self):
        """
        :return: A list of all the students from the repository
        """
        return self.__student_repository.get_students()

    def get_students_in_group(self, group):
        """
        :param group: a string representing the group of the students
        :return: A list of all the students from the repository who are from the given group
        """
        return list(filter(lambda student: student.group == group, self.get_students()))

    def add_13_random_students(self):
        """
        This function adds 13 students to the repository. The students are generated by randomly getting a first
        name, last name and group from the respective list
        """
        first_names = ["Amalia", "Adrian", "Daniel", "Gheorghe", "Horea", "Rudolf", "Sebastian", "Silviu", "Stefan",
                       "Irina", "Gabriel", "Robert", "Diana", "Teodora", "Alexandru", "Radu", "Denisa", "Dana"]
        last_names = ["Popa", "Ionescu", "Radu", "Rusu", "Florea", "Stanciu", "Ungureanu", "Craciun", "Nicolae",
                      "Preda", "Suciu", "Petrescu", "Crisan", "Luca", "Nita", "Costea", "Oltean", "Radac", "Bera"]
        groups = ['911', '912', '913', '914', '915', '916', '917']

        for i in range(13):
            first_name = first_names[random.randint(0, len(first_names) - 1)]
            last_name = last_names[random.randint(0, len(last_names) - 1)]
            full_name = "{0} {1}".format(first_name, last_name)
            group = groups[random.randint(0, len(groups) - 1)]
            student = Student(str(i + 1), full_name, group)

            self.__student_repository.add(student)
